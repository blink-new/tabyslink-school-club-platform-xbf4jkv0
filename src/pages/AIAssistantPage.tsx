import React, { useState, useEffect, useRef } from 'react';
import { Send, Bot, User, Sparkles, GraduationCap, BarChart3, MessageCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { blink } from '@/blink/client';
import { AIChat, AIMessage } from '@/types';

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export default function AIAssistantPage() {
  const [user, setUser] = useState<any>(null);
  const [activeTab, setActiveTab] = useState('club_analysis');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—É–±–æ–≤
  const [clubMessages, setClubMessages] = useState<ChatMessage[]>([]);
  const [clubInput, setClubInput] = useState('');
  const [clubLoading, setClubLoading] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –í–£–ó–∞–º
  const [uniMessages, setUniMessages] = useState<ChatMessage[]>([]);
  const [uniInput, setUniInput] = useState('');
  const [uniLoading, setUniLoading] = useState(false);
  
  const clubScrollRef = useRef<HTMLDivElement>(null);
  const uniScrollRef = useRef<HTMLDivElement>(null);

  const loadChatHistory = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      setClubMessages([
        {
          id: 'welcome_club',
          role: 'assistant',
          content: 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—É–±–æ–≤. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∫–ª—É–±–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. –û –∫–∞–∫–æ–º –∫–ª—É–±–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?',
          timestamp: new Date()
        }
      ]);

      setUniMessages([
        {
          id: 'welcome_uni',
          role: 'assistant',
          content: 'üéì –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã. –ü–æ–º–æ–≥—É –≤–∞–º –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –≤–Ω–µ–∫–ª–∞—Å—Å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∫–∞–∫–∏–µ –∫–ª—É–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–∏–ª—å–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö –∏ –ø–ª–∞–Ω–∞—Ö!',
          timestamp: new Date()
        }
      ]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤:', error);
    }
  };

  useEffect(() => {
    const unsubscribe = blink.auth.onAuthStateChanged((state) => {
      setUser(state.user);
      if (state.user) {
        loadChatHistory();
      }
    });
    return unsubscribe;
  }, []);

  useEffect(() => {
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –¥–ª—è —á–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—É–±–æ–≤
    if (clubScrollRef.current) {
      clubScrollRef.current.scrollTop = clubScrollRef.current.scrollHeight;
    }
  }, [clubMessages]);

  useEffect(() => {
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –¥–ª—è —á–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –í–£–ó–∞–º
    if (uniScrollRef.current) {
      uniScrollRef.current.scrollTop = uniScrollRef.current.scrollHeight;
    }
  }, [uniMessages]);

  const sendMessage = async (type: 'club_analysis' | 'university_consultant', message: string) => {
    if (!user || !message.trim()) return;

    const isClubChat = type === 'club_analysis';
    const setMessages = isClubChat ? setClubMessages : setUniMessages;
    const setLoading = isClubChat ? setClubLoading : setUniLoading;
    const setInput = isClubChat ? setClubInput : setUniInput;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage: ChatMessage = {
      id: `user_${Date.now()}`,
      role: 'user',
      content: message,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setLoading(true);

    try {
      // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const systemPrompt = type === 'club_analysis' 
        ? `–í—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à–∫–æ–ª—å–Ω—ã—Ö –∫–ª—É–±–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ TabysLink. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —É—á–µ–Ω–∏–∫–∞–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª—É–±–æ–≤.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑ –∫–ª—É–±–∞ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏)
- –í—ã—è–≤–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω (–≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å, —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç–æ–Ω, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ actionable —Å–æ–≤–µ—Ç—ã, –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–æ—â—Ä–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤.`
        : `–í—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ç–æ–º, –∫–∞–∫ –≤–Ω–µ–∫–ª–∞—Å—Å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —É—Å–ø–µ—Ö –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞ (–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤–Ω–µ–∫–ª–∞—Å—Å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤)
- –°–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –∫–ª—É–±–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π)
- –¢–æ–ø–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã (–∫–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤, –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞ vs –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –í–£–ó–æ–≤, —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ –ø—Ä–∏–µ–º–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏—è—Ö, —Ü–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ –≤–Ω–µ–∫–ª–∞—Å—Å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.`;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
      const response = await blink.ai.generateText({
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        model: 'gpt-4o-mini',
        maxTokens: 500
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const assistantMessage: ChatMessage = {
        id: `assistant_${Date.now()}`,
        role: 'assistant',
        content: response.text,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, assistantMessage]);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      try {
        const chatId = `chat_${type}_${user.id}`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await blink.db.ai_messages.create({
          id: `msg_${Date.now()}_user`,
          chat_id: chatId,
          role: 'user',
          content: message
        });

        await blink.db.ai_messages.create({
          id: `msg_${Date.now()}_assistant`,
          chat_id: chatId,
          role: 'assistant',
          content: response.text
        });
      } catch (dbError) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', dbError);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage: ChatMessage = {
        id: `error_${Date.now()}`,
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setLoading(false);
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const quickReplies = {
    club_analysis: [
      '–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?',
      '–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –∫–ª—É–±–∞',
      '–ò–¥–µ–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
      '–ö–∞–∫ –ø—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?'
    ],
    university_consultant: [
      '–ö–∞–∫–∏–µ –∫–ª—É–±—ã –ª—É—á—à–µ –¥–ª—è IT-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?',
      '–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–∏–ª—å–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ?',
      '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –í–£–ó–æ–≤',
      '–õ–∏–¥–µ—Ä—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–ª—É–±–∞—Ö'
    ]
  };

  if (!user) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <h2 className="text-xl font-semibold mb-2">–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
          <p className="text-gray-600">–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
          <Button onClick={() => blink.auth.login()} className="mt-4">
            –í–æ–π—Ç–∏
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div>
        <h1 className="text-3xl font-bold text-gray-900">–ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã</h1>
        <p className="text-gray-600">–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤</p>
      </div>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <Card className="border-0 bg-gradient-to-br from-purple-50 to-blue-50 hover:shadow-lg transition-all duration-300">
          <CardHeader>
            <div className="flex items-center gap-3">
              <div className="p-2 bg-primary/10 rounded-lg">
                <BarChart3 className="w-6 h-6 text-primary" />
              </div>
              <div>
                <CardTitle className="text-lg">–ê–Ω–∞–ª–∏–∑ –ö–ª—É–±–æ–≤</CardTitle>
                <CardDescription>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—É–±–æ–≤</CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600 mb-3">
              –ü–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª—É–±–∞, –≤—ã—è–≤–ª—è—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.
            </p>
            <div className="flex flex-wrap gap-2">
              <Badge variant="secondary">–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</Badge>
              <Badge variant="secondary">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Badge>
              <Badge variant="secondary">–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Å—Ç–∞</Badge>
            </div>
          </CardContent>
        </Card>

        <Card className="border-0 bg-gradient-to-br from-green-50 to-emerald-50 hover:shadow-lg transition-all duration-300">
          <CardHeader>
            <div className="flex items-center gap-3">
              <div className="p-2 bg-green-600/10 rounded-lg">
                <GraduationCap className="w-6 h-6 text-green-600" />
              </div>
              <div>
                <CardTitle className="text-lg">–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –í–£–ó–∞–º</CardTitle>
                <CardDescription>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã</CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600 mb-3">
              –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–æ –≤–ª–∏—è–Ω–∏—é –≤–Ω–µ–∫–ª–∞—Å—Å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–∏–ª—å–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.
            </p>
            <div className="flex flex-wrap gap-2">
              <Badge variant="secondary">–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</Badge>
              <Badge variant="secondary">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –í–£–ó–æ–≤</Badge>
              <Badge variant="secondary">–ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</Badge>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
      <Card className="border-0 bg-white/70 backdrop-blur-sm">
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="club_analysis" className="flex items-center gap-2">
              <BarChart3 className="w-4 h-4" />
              –ê–Ω–∞–ª–∏–∑ –ö–ª—É–±–æ–≤
            </TabsTrigger>
            <TabsTrigger value="university_consultant" className="flex items-center gap-2">
              <GraduationCap className="w-4 h-4" />
              –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –í–£–ó–∞–º
            </TabsTrigger>
          </TabsList>

          <TabsContent value="club_analysis" className="mt-0">
            <div className="flex flex-col h-[600px]">
              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <ScrollArea className="flex-1 p-4" ref={clubScrollRef}>
                <div className="space-y-4">
                  {clubMessages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      {message.role === 'assistant' && (
                        <div className="flex-shrink-0 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                          <Bot className="w-4 h-4 text-primary" />
                        </div>
                      )}
                      
                      <div className={`max-w-[80%] ${message.role === 'user' ? 'order-1' : ''}`}>
                        <div
                          className={`p-3 rounded-lg ${
                            message.role === 'user'
                              ? 'bg-primary text-white'
                              : 'bg-gray-100 text-gray-900'
                          }`}
                        >
                          <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                        </div>
                        <p className="text-xs text-gray-500 mt-1 px-1">
                          {formatTime(message.timestamp)}
                        </p>
                      </div>

                      {message.role === 'user' && (
                        <div className="flex-shrink-0 w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center order-2">
                          <User className="w-4 h-4 text-gray-600" />
                        </div>
                      )}
                    </div>
                  ))}
                  
                  {clubLoading && (
                    <div className="flex gap-3 justify-start">
                      <div className="flex-shrink-0 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                        <Bot className="w-4 h-4 text-primary" />
                      </div>
                      <div className="bg-gray-100 p-3 rounded-lg">
                        <div className="flex gap-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </ScrollArea>

              {/* –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã */}
              <div className="p-4 border-t">
                <div className="flex flex-wrap gap-2 mb-3">
                  {quickReplies.club_analysis.map((reply, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      onClick={() => sendMessage('club_analysis', reply)}
                      disabled={clubLoading}
                      className="text-xs"
                    >
                      {reply}
                    </Button>
                  ))}
                </div>

                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                <div className="flex gap-2">
                  <Input
                    value={clubInput}
                    onChange={(e) => setClubInput(e.target.value)}
                    placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–± –∞–Ω–∞–ª–∏–∑–µ –∫–ª—É–±–æ–≤..."
                    onKeyPress={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage('club_analysis', clubInput);
                      }
                    }}
                    disabled={clubLoading}
                  />
                  <Button
                    onClick={() => sendMessage('club_analysis', clubInput)}
                    disabled={clubLoading || !clubInput.trim()}
                    className="bg-primary hover:bg-primary/90"
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="university_consultant" className="mt-0">
            <div className="flex flex-col h-[600px]">
              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <ScrollArea className="flex-1 p-4" ref={uniScrollRef}>
                <div className="space-y-4">
                  {uniMessages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      {message.role === 'assistant' && (
                        <div className="flex-shrink-0 w-8 h-8 bg-green-600/10 rounded-full flex items-center justify-center">
                          <GraduationCap className="w-4 h-4 text-green-600" />
                        </div>
                      )}
                      
                      <div className={`max-w-[80%] ${message.role === 'user' ? 'order-1' : ''}`}>
                        <div
                          className={`p-3 rounded-lg ${
                            message.role === 'user'
                              ? 'bg-green-600 text-white'
                              : 'bg-gray-100 text-gray-900'
                          }`}
                        >
                          <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                        </div>
                        <p className="text-xs text-gray-500 mt-1 px-1">
                          {formatTime(message.timestamp)}
                        </p>
                      </div>

                      {message.role === 'user' && (
                        <div className="flex-shrink-0 w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center order-2">
                          <User className="w-4 h-4 text-gray-600" />
                        </div>
                      )}
                    </div>
                  ))}
                  
                  {uniLoading && (
                    <div className="flex gap-3 justify-start">
                      <div className="flex-shrink-0 w-8 h-8 bg-green-600/10 rounded-full flex items-center justify-center">
                        <GraduationCap className="w-4 h-4 text-green-600" />
                      </div>
                      <div className="bg-gray-100 p-3 rounded-lg">
                        <div className="flex gap-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </ScrollArea>

              {/* –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã */}
              <div className="p-4 border-t">
                <div className="flex flex-wrap gap-2 mb-3">
                  {quickReplies.university_consultant.map((reply, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      size="sm"
                      onClick={() => sendMessage('university_consultant', reply)}
                      disabled={uniLoading}
                      className="text-xs"
                    >
                      {reply}
                    </Button>
                  ))}
                </div>

                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                <div className="flex gap-2">
                  <Input
                    value={uniInput}
                    onChange={(e) => setUniInput(e.target.value)}
                    placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –í–£–ó—ã..."
                    onKeyPress={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage('university_consultant', uniInput);
                      }
                    }}
                    disabled={uniLoading}
                  />
                  <Button
                    onClick={() => sendMessage('university_consultant', uniInput)}
                    disabled={uniLoading || !uniInput.trim()}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </Card>
    </div>
  );
}